@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using TestProjectFrontEnd.Models;
@using TestProjectFrontEnd.Services;


<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="@loginModel.Email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" class="form-control" @bind-Value="@loginModel.Password" type="password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private ITokenService TokenService { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    private async Task HandleLogin()
    {
        // Call the token service to get the token
        var token = await TokenService.GetTokenAsync(loginModel);

        if (!string.IsNullOrEmpty(token))
        {
            // Successful login, store the token and redirect to the main page
            await TokenService.StoreTokenAsync(token);
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            // Invalid credentials, display an error message
            await JSRuntime.InvokeVoidAsync("alert", "Invalid email or password.");
        }
    }
}
